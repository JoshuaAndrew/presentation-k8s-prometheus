restartPolicy: Always

image:
  repository: prom/blackbox-exporter
  tag: v0.12.0
  pullPolicy: IfNotPresent

nodeSelector: {}

config:
  modules:
      http_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2"]
          # set to [] after generate_servicemonitor.sh has been fixed.
          valid_status_codes: [200, 201, 202, 203, 204, 205, 206, 207, 208]  # Defaults to 2xx
          method: GET
          no_follow_redirects: true
          fail_if_ssl: false
          fail_if_not_ssl: true
          #fail_if_matches_regexp:
          #  - "Could not connect to database"
          #fail_if_not_matches_regexp:
          #  - "Download the latest version here"
          tls_config:
            insecure_skip_verify: false
          preferred_ip_protocol: "ip4" # defaults to "ip6"
      ssh_banner:
        prober: tcp
        tcp:
          query_response:
          - expect: "^SSH-2.0-"
          preferred_ip_protocol: "ip4" # defaults to "ip6"
      tls_connect:
        prober: tcp
        timeout: 5s
        tcp:
          tls: true
          preferred_ip_protocol: "ip4" # defaults to "ip6"
      tcp_connect:
        prober: tcp
        timeout: 5s
        tcp:
          preferred_ip_protocol: "ip4" # defaults to "ip6"
      imap_starttls:
        prober: tcp
        timeout: 5s
        tcp:
          query_response:
            - expect: "OK.*STARTTLS"
            - send: ". STARTTLS"
            - expect: "OK"
            - starttls: true
            - send: ". capability"
            - expect: "CAPABILITY IMAP4rev1"
          preferred_ip_protocol: "ip4" # defaults to "ip6"
      smtp_starttls:
        prober: tcp
        timeout: 5s
        tcp:
          query_response:
            - expect: "^220 ([^ ]+) ESMTP (.+)$"
            - send: "EHLO prober"
            - expect: "^250-STARTTLS"
            - send: "STARTTLS"
            - expect: "^220"
            - starttls: true
            - send: "EHLO prober"
            - expect: "^250-AUTH"
            - send: "QUIT"
          preferred_ip_protocol: "ip4" # defaults to "ip6"
      icmp:
        prober: icmp
        timeout: 5s
        icmp:
          preferred_ip_protocol: "ip4"
          source_ip_address: "127.0.0.1"

resources:
  # limits:
  #   memory: 300Mi
  # requests:
  #   memory: 50Mi

service:
  type: ClusterIP
  port: 9115

## An Ingress resource can provide name-based virtual hosting and TLS
## termination among other things for CouchDB deployments which are accessed
## from outside the Kubernetes cluster.
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  hosts: []
     # - chart-example.local
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

podAnnotations: {}

extraArgs: []
#  --history.limit=1000

replicas: 2
## Monitors ConfigMap changes and POSTs to a URL
## Ref: https://github.com/jimmidyson/configmap-reload
##
configmapReload:
  ## configmap-reload container name
  ##
  name: configmap-reload

  ## configmap-reload container image
  ##
  image:
    repository: jimmidyson/configmap-reload
    tag: v0.2.2
    pullPolicy: IfNotPresent

  ## configmap-reload resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
